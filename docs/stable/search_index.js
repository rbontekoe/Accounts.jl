var documenterSearchIndex = {"docs":
[{"location":"api/#.-API","page":"1 - API","title":"1. API","text":"","category":"section"},{"location":"api/#create","page":"1 - API","title":"create","text":"","category":"section"},{"location":"api/","page":"1 - API","title":"1 - API","text":"create","category":"page"},{"location":"api/#Accounts.API.create","page":"1 - API","title":"Accounts.API.create","text":"create(address_type::AddressType, address::String)::Address\ncreate(name::String, addresses::Array{Address,1})::Person\ncreate(name::String)::Person\n\nCreate an Address or a Person object.\n\nExample\n\njulia> using Accounts\n\njulia> address_email = create(EMAIL, \"donald@duckcity.com\")\nAccounts.Domain.Address(\"7763679977726623090\", Dates.DateTime(\"2020-09-28T10:56:29.461\"), EMAIL, \"donald@duckcity.com\")\n\njulia> donald = create(\"Donald Duck\", [address_email])\nAccounts.Domain.Person(\"14456927583164318539\", Dates.DateTime(\"2020-09-28T10:56:29.997\"), \"Donald Duck\", Accounts.Domain.Address[Accounts.Domain.Address(\"7763679977726623090\", Dates.DateTime(\"2020-09-28T10:56:29.461\"), EMAIL, \"donald@duckcity.com\")])\n\njulia> donald.id\n\"14456927583164318539\"\n\njulia> donald.created\n2020-09-28T10:56:29.997\n\njulia> donald.name\n\"Donald Duck\"\n\njulia> donald.addresses\n1-element Array{Accounts.Domain.Address,1}:\n Accounts.Domain.Address(\"7763679977726623090\", Dates.DateTime(\"2020-09-28T10:56:29.461\"), EMAIL, \"donald@duckcity.com\")\n\n\n\n\n\n","category":"function"},{"location":"infrastructure/#Infrastructure","page":"2 - Infrastructure","title":"Infrastructure","text":"","category":"section"},{"location":"infrastructure/#add_to_file","page":"2 - Infrastructure","title":"add_to_file","text":"","category":"section"},{"location":"infrastructure/","page":"2 - Infrastructure","title":"2 - Infrastructure","text":"add_to_file","category":"page"},{"location":"infrastructure/#Accounts.Infrastructure.add_to_file","page":"2 - Infrastructure","title":"Accounts.Infrastructure.add_to_file","text":"add_to_file\n\nAdd Person's to the datastore.\n\nExample\n\njulia> using Accounts\n\njulia> const FILE_ACCOUNTS = \"./test_accounts.txt\";\n\njulia> address_email = create(EMAIL, \"donald@duckcity.com\");\n\njulia> donald = create(\"Donald Duck\", [address_email]);\n\njulia> add_to_file(FILE_ACCOUNTS, [donald])\n\n\n\n\n\n","category":"function"},{"location":"infrastructure/#read_from_file","page":"2 - Infrastructure","title":"read_from_file","text":"","category":"section"},{"location":"infrastructure/","page":"2 - Infrastructure","title":"2 - Infrastructure","text":"read_from_file","category":"page"},{"location":"infrastructure/#Accounts.Infrastructure.read_from_file","page":"2 - Infrastructure","title":"Accounts.Infrastructure.read_from_file","text":"read_from_file\n\nGet Person's from the datastore.\n\nExample\n\njulia> using Accounts\n\njulia> const FILE_ACCOUNTS = \"./test_accounts.txt\";\n\njulia> address_email = create(EMAIL, \"donald@duckcity.com\");\n\njulia> donald = create(\"Donald Duck\", [address_email]);\n\njulia> add_to_file(FILE_ACCOUNTS, [donald])\n\njulia> read_from_file(FILE_ACCOUNTS)\n1-element Array{Any,1}:\n Accounts.Domain.Person(\"10973269859630729578\", DateTime(\"2020-09-28T10:41:17.59\"), \"Donald Duck\", Accounts.Domain.Address[Accounts.Domain.Address(\"6678746402434096981\", DateTime(\"2020-09-28T10:41:17.277\"), EMAIL, \"donald@duckcity.com\")])\n\n\n\n\n\n","category":"function"},{"location":"#Accounts.jl","page":"Accounts","title":"Accounts.jl","text":"","category":"section"},{"location":"","page":"Accounts","title":"Accounts","text":"Documentation of Accounts.jl","category":"page"},{"location":"","page":"Accounts","title":"Accounts","text":"In the course BAW, the student learns to develop the module Accounts.jl.","category":"page"},{"location":"example/#Examples","page":"3 - Examples","title":"Examples","text":"","category":"section"},{"location":"example/#Example-1:-Create,-Save,-and-Retrieve-Data","page":"3 - Examples","title":"Example 1: Create, Save, and Retrieve Data","text":"","category":"section"},{"location":"example/","page":"3 - Examples","title":"3 - Examples","text":"using Pkg\n\nPkg.activate(\".\")\n\ntry\n    using Accounts\ncatch e\n    Pkg.add(url=\"https://github.com/rbontekoe/Accounts.jl\")\n    using Accounts\nend\n\nconst FILE_ACCOUNTS = \"./test_accounts.txt\"\n\ndonald_email = create(EMAIL, \"donald@duckcity.com\")\n\ndonald_work = create(WORK,\n  \"\"\"\n  Donalds Hardware Store\n  attn. Donald Duck\n  1190 Seven Seas Dr\n  FL 32830 Lake Buena Vista\n  USA\n  \"\"\"\n)\n\naddresses = [donald_email, donald_work]\n\ndonald = create(\"Donald Duck\", addresses)\n\nadd_to_file(FILE_ACCOUNTS, [donald])\n\nresult = read_from_file(FILE_ACCOUNTS)\n\nprintln(result[1].name)\n\nprintln(result[1].addresses[1].address)\n\nrm(FILE_ACCOUNTS) # Remove the file","category":"page"},{"location":"example/#Example-2:-Currying-and-Piping-()","page":"3 - Examples","title":"Example 2: Currying and Piping (|>)","text":"","category":"section"},{"location":"example/","page":"3 - Examples","title":"3 - Examples","text":"using Accounts, DataFrames\n\nconst FILE_ACCOUNTS = \"./test_accounts.txt\"\n\n# declare Currying, see: https://riptutorial.com/julia-lang/example/20261/implementing-currying\n\ncurry(f, x) = (xs...) -> f(x, xs...)\n\nadd = curry(add_to_file, FILE_ACCOUNTS)\n\nread = curry(read_from_file, FILE_ACCOUNTS)\n\n# end Currying\n\nemail = create(EMAIL, \"donald@duckcity.com\")\n\ndonald = create(\"Donald Duck\", [email])\n\n# using Currying\n\n[donald] |> add # How to use it\n\nr = read() |> DataFrame\n\nprintln(r)\n\n# Remove data file\n\ncmd = `rm $FILE_ACCOUNTS` # linux remove file statement\n\nrun(cmd) # remove the file","category":"page"}]
}
